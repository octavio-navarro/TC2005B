/*
Manage the flow of the Simon game
Keep track of the turn, and the list of buttons to press

Gilberto Echeverria
2024-04-24
*/

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class SimonController : MonoBehaviour
{
    [SerializeField] List<SimonButton> buttons;
    [SerializeField] List<int> sequence;
    [SerializeField] float delay;
    [SerializeField] int level;
    [SerializeField] bool playerTurn = false;

    [SerializeField] int counter = 0;

    //[SerializeField] int numButtons;
    [SerializeField] GameObject buttonPrefab;
    [SerializeField] Transform buttonParent;

    // Variables for UI
    [SerializeField] TMP_Text infoText;

    // Fake JSON string to simulate the data comming from the API
    public string apiData = @"
    {
        ""buttons"": [
            {
                ""id"": 0,
                ""r"": 1.0,
                ""g"": 0.0,
                ""b"": 0.5
            },
            {
                ""id"": 1,
                ""r"": 0.0,
                ""g"": 0.8,
                ""b"": 0.8
            },
            {
                ""id"": 2,
                ""r"": 0.7,
                ""g"": 0.9,
                ""b"": 0.1
            }
        ]
    }
    ";

    [SerializeField] ColorButtons allButtons;

    // Start is called before the first frame update
    void Start()
    {
        // Configure the buttons to be used in the game
        //PrepareButtons();
        GetComponent<APIConnection>().GetData();
    }

    // Configure the callback functions for the buttons
    public void PrepareButtons()
    {
        // Convert the json string into an object
        allButtons = JsonUtility.FromJson<ColorButtons>(apiData);

        // Iterate over the list of buttons in the new object to create
        // as many buttons as appear in the data from the API
        foreach (ColorButton buttonData in allButtons.buttons)
        {
            // Create the copies of the button as children of the Panel
            GameObject newButton = Instantiate(buttonPrefab, buttonParent);
            // Configure the button with the corresponding data
            newButton.GetComponent<Image>().color = new Color(buttonData.r, buttonData.g, buttonData.b);
            newButton.GetComponent<SimonButton>().Init(buttonData.id);
            newButton.GetComponent<Button>().onClick.AddListener(() => ButtonPressed(buttonData.id));
            // Add the button to the list, used during the game
            buttons.Add(newButton.GetComponent<SimonButton>());
        }
        /*
        for (int i=0; i<numButtons; i++) {
            int index = i;
            // Create the copies of the button as children of the Panel
            GameObject newButton = Instantiate(buttonPrefab, buttonParent);
            // Set the default color for each button, based on its index
            newButton.GetComponent<Image>().color = Color.HSVToRGB((float)index/numButtons, 1, 1);
            newButton.GetComponent<SimonButton>().Init(index);
            buttons.Add(newButton.GetComponent<SimonButton>());
            buttons[i].gameObject.GetComponent<Button>().onClick.AddListener(() => ButtonPressed(index));
        }
        */
        // Start the game by adding the first button
        AddToSequence();
    }

    // Prepare everything for a new game
    public void RestartGame()
    {
        playerTurn = false;
        level = 0;
        counter = 0;
        sequence.Clear();
        AddToSequence();
    }

    // Main function to validate that the button pressed by the user 
    // corresponds with the sequence generated by the CPU
    public void ButtonPressed(int index)
    {
        if (playerTurn) {
            if (index == sequence[counter++]) {
                // Highlight the button selected by the player
                buttons[index].Highlight();
                if (counter == sequence.Count) {
                    // Finish the player turn to ensure no other actions are
                    // taken into account
                    playerTurn = false;
                    level++;
                    counter = 0;
                    AddToSequence();
                }
            } else {
                playerTurn = false;
                Debug.Log("Game Over!");
                infoText.text = $"Game Over!\nYou cleared level {level}";
            }
        }
    }

    // Add another number to the sequence and display it
    void AddToSequence()
    {
        // Add a new button to the sequence
        sequence.Add(Random.Range(0, buttons.Count));
        StartCoroutine(PlaySequence());
    }

    // Display every button in the sequence so far
    IEnumerator PlaySequence()
    {
        yield return new WaitForSeconds(delay * 0.5f);
        infoText.text = "CPU's turn";
        // Add an initial delay before showing the sequence
        yield return new WaitForSeconds(delay);
        foreach (int index in sequence) {
            buttons[index].Highlight();
            yield return new WaitForSeconds(delay);
        }
        // Switch the turn over to the player
        playerTurn = true;
        infoText.text = "Player's turn";
    }
}